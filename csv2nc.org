#+PROPERTY: header-args:python+ :exports code :session csv2nc :results none
#+PROPERTY: header-args:python+ :python /home/kdm/local/miniconda3/envs/PROMICE_dev/bin/python
#+PROPERTY: header-args:python+ :tangle no
#+PROPERTY: header-args:bash+ :results verbatim :exports results

* Table of contents                               :toc_2:noexport:
- [[#introduction][Introduction]]
  - [[#cf-metadata][CF metadata]]
  - [[#acdd-metadata][ACDD metadata]]
- [[#csv-to-netcdf-example][CSV to NetCDF (example)]]
- [[#csv-to-netcdf][CSV to NetCDF]]
- [[#time-series-netcdf][Time series NetCDF]]
- [[#netcdf-from-cdl][NetCDF from CDL]]
  - [[#official-version][Official version]]
  - [[#improved-official-version][Improved official version]]
  - [[#my-version][My version]]

* Introduction

This workbook implements CSV to NetCDF conversion for the PROMICE AWS v3 data products. Converting from CSV to basic NetCDF is trivial, but here we make sure to make CF- and ACDD- compliant NetCDF files.

We follow http://cfconventions.org/cf-conventions/v1.6.0/cf-conventions.html#_single_time_series_including_deviations_from_a_nominal_fixed_spatial_location "H.2.3. Single time series, including deviations from a nominal fixed spatial location" conventions.

** CF metadata

CF (Climate and Forecast) metadata improve [[https://www.go-fair.org/fair-principles/][FAIR principles]]. The CF standards are documented at https://cfconventions.org/. CF conventions require re-naming the CSV header columns, and adding =standard_name=, =long_name=, =units=, and other metadata. We create and use the [[./variables.csv]] file to associate properties with each CSV column, and use these properties to create the NetCDF file.

The [[./variables.csv]] file is included below:

#+BEGIN_SRC bash :results table :post add_header_row(tbl=*this*)
cat variables.csv
#+END_SRC

#+RESULTS:
| CSV_column                             | field          | standard_name                                        | long_name                                         | units   |
|----------------------------------------+----------------+------------------------------------------------------+---------------------------------------------------+---------|
| AirPressure(hPa)                       | p              | air_pressure                                         | Air pressure                                      | hPa     |
| AirTemperature(C)                      | t_1            | air_temperature                                      | Air temperature 1                                 | C       |
| AirTemperatureHygroClip(C)             | t_2            | air_temperature                                      | Air temperature 2                                 | C       |
| RelativeHumidity(%)                    | rh             | relative_humidity                                    | Relative humidity                                 | %       |
| WindSpeed(m/s)                         | wspd           | wind_speed                                           | Wind speed                                        | m s-1   |
| WindDirection(d)                       | wdir           | wind_from_direction                                  | Wind from direction                               | degrees |
| ShortwaveRadiationDown(W/m2)           | dsr            | surface_downwelling_shortwave_flux                   | Downwelling shortwave radiation                   | W m-2   |
| ShortwaveRadiationDownCorrectionFactor | dsr_cor_factor | surface_downwelling_shortwave_flux_correction_factor | Downwelling shortwave radiation correction factor |         |
| ShortwaveRadiationDown_Cor(W/m2)       | dsr_cor        | surface_downwelling_shortwave_flux_corrected         | Downwelling shortwave radiation corrected         | W m-2   |
| ShortwaveRadiationUp(W/m2)             | usr            | surface_upwelling_shortwave_flux                     | Upwelling shortwave radiation                     | W m-2   |
| ShortwaveRadiationUp_Cor(W/m2)         | usr_cor        | surface_upwelling_shortwave_flux_corrected           | Upwelling shortwave radiation corrected           | W m-2   |
| LongwaveRadiationDown(W/m2)            | dlr            | surface_downwelling_longwave_flux                    | Downwelling longwave radiation                    | W m-2   |
| LongwaveRadiationUp(W/m2)              | ulr            | surface_upwelling_longwave_flux                      | Upwelling longwave radiation                      | W m-2   |
| TemperatureRadiometer(C)               | t_rad          | temperature_of_radiation_sensor                      | Radiation sensor temperature                      | C       |
| HeightSensorBoom(m)                    | z_boom         | distance_to_surface_from_boom                        | Boom height                                       | m       |
| HeightSensorBoomQuality                | z_boom_q       | distance_to_surface_from_boom_quality                | Boom height (quality)                             |         |
| HeightStakes(m)                        | z_stake        | distance_to_surface_from_stake_assembly              | Stake height                                      | m       |
| HeightStakesQuality                    | z_stake_q      | distance_to_surface_from_stake_assembly_quality      | Stake height (quality)                            |         |
| DepthPressureTransducer(m)             | z_pt           | depth_of_pressure_transducer_in_ice                  | Depth of pressure transducer in ice               | m       |
| DepthPressureTransducer_Cor(m)         | z_pt_cor       | depth_of_pressure_transducer_in_ice_corrected        | Depth of pressure transducer in ice corrected     | m       |
| AblationPressureTransducer(mm)         | ablation_pt    | ablation_pt                                          | Ablation from pressure transducer                 | mm      |
| IceTemperature1(C)                     | t_i_1          | ice_temperature_at_t1                                | Ice temperature at sensor 1                       | C       |
| IceTemperature2(C)                     | t_i_2          | ice_temperature_at_t2                                | Ice temperature at sensor 2                       | C       |
| IceTemperature3(C)                     | t_i_3          | ice_temperature_at_t3                                | Ice temperature at sensor 3                       | C       |
| IceTemperature4(C)                     | t_i_4          | ice_temperature_at_t4                                | Ice temperature at sensor 4                       | C       |
| IceTemperature5(C)                     | t_i_5          | ice_temperature_at_t5                                | Ice temperature at sensor 5                       | C       |
| IceTemperature6(C)                     | t_i_6          | ice_temperature_at_t6                                | Ice temperature at sensor 6                       | C       |
| IceTemperature7(C)                     | t_i_7          | ice_temperature_at_t7                                | Ice temperature at sensor 7                       | C       |
| IceTemperature8(C)                     | t_i_8          | ice_temperature_at_t8                                | Ice temperature at sensor 8                       | C       |
| TiltToEast(d)                          | tilt_x         | platform_view_angle_x                                | Tilt to east                                      | degrees |
| TiltToNorth(d)                         | tilt_y         | platform_view_angle_y                                | Tilt to north                                     | degrees |
| TimeGPS(hhmmssUTC)                     | gps_time       | gps_time                                             | GPS time                                          | s       |
| LatitudeGPS(degN)                      | gps_lat        | gps_latitude                                         | Latitude                                          | degrees |
| LatitudeGPS_HDOP<1(degN)               | gps_lat_hdop_1 | gps_latitude_hdop_1                                  | Latitude when HDOP less than 1                    | degrees |
| LongitudeGPS(degW)                     | gps_lon        | gps_longitude                                        | Longitude                                         | degrees |
| LongitudeGPS_HDOP<1(degW)              | gps_lon_hdop_1 | gps_longitude_hdop_1                                 | Longitude when HDOP less than 1                   | degrees |
| ElevationGPS(m)                        | gps_alt        | gps_altitude                                         | Altitude                                          | m       |
| ElevationGPS_HDOP<1(m)                 | gps_alt_hdop_1 | gps_altitude_hdop_1                                  | Altitude when HDOP less than 1                    | m       |
| HorDilOfPrecGPS                        | gps_hdop       | gps_hdop                                             | GPS horizontal dillution of preciosion (HDOP)     | m       |
| HorDilOfPrecGPS_HDOP<1                 | gps_hdop_1     | gps_hdop_1                                           | GPS HDOP when HDOP less than 1                    | m       |
| LoggerTemperature(C)                   | t_log          | temperature_of_logger                                | Logger temperature                                | C       |
| FanCurrent(mA)                         | fan_dc         | fan_current                                          | Fan current                                       | mA      |
| FanOK(%)                               | fan_ok         | fan_ok                                               | Fan OK                                            | %       |
| BatteryVoltage(V)                      | batt_v         | battery_voltage                                      | Battery voltage                                   | V       |
| SensibleHeatFlux(W/m2)                 | dshf           | surface_downward_sensible_heat_flux                  | Sensible heat flux                                | W m-2   |
| LatentHeatFlux(W/m2)                   | dlhf           | surface_downward_latent_heat_flux                    | Latent heat flux                                  | W m-2   |
| Albedo                                 | albedo         | surface_albedo                                       | Albedo                                            |         |
| Albedo_theta<70d                       | albedo_70      | surface_albedo_70                                    | Albedo when theta less than 70 degrees            |         |
| CloudCover                             | cc             | cloud_area_fraction                                  | Cloud cover                                       | %       |
| SurfaceTemperature(C)                  | t_surf         | surface_temperature                                  | Surface temperature                               | C       |
| RelativeHumidity_wrtWater(%)           | rh_cor         | relative_humidity                                    | Relative humidity (corrected)                     | %       |
| SpecificHumidity(g/kg)                 | sh             | specific_humidity                                    | Specific humidity                                 | g kg-1  |
| ZenithAngleSun(d)                      | sza            | solar_zenith_angle                                   | Solar zenith angle                                | degrees |
| DirectionSun(d)                        | sun_dir        | sun_direction                                        | Direction to sun                                  | degrees |
| TiltAWS(d)                             | tilt           | platform_view_angle                                  | Tilt                                              | degrees |
| TiltDirectionAWS(d)                    | tilt_direction | platform_tilt_direction                              | Tilt direction                                    | degrees |
| AngleBetweenSunAndAWS(d)               |                |                                                      |                                                   |         |

** ACDD metadata

ACDD metadata are documented at https://gcw.met.no/node/4. We use the following values, implemented in the code below.

| Attribute           |                                                         |
|---------------------+---------------------------------------------------------|
| id                  | AWS_v3                                                  |
| naming_authority    | dk.promice                                              |
| title               | PROMICE AWS data                                        |
| summary             | PROMICE AWS data                                        |
| keywords            | PROMICE, AWS, Greenland, weather station                |
| geospatial_lat_min  | [From data]                                             |
| geospatial_lat_max  | [From data]                                             |
| geospatial_lon_min  | [From data]                                             |
| geospatial_lon_max  | [From data]                                             |
| geospatial_lon_min  | [From data]                                             |
| time_coverage_start | [From data]                                             |
| time_coverage_end   | [From data]                                             |
| Conventions         | ACDD-1.3, CF-1.7                                        |
| history             | [From code]                                             |
| source              | PROMICE AWS L3 processing scripts. Git hash [from code] |
| processing_level    | Level 3 NetCDF conversion from CSV output               |
| date_created        | [From code]                                             |
| creator_type        | person                                                  |
| creator_institution | GEUS                                                    |
| creator_name        | Ken Mankoff                                             |
| creator_email       | kdm@geus.dk                                             |
| creator_url         | http://kenmankoff.com                                   |
| institution         | GEUS                                                    |
| publisher_name      | Ken Mankoff                                             |
| publisher_email     | kdm@geus.dk                                             |
| publisher_url       | http://promice.dk                                       |
| project             | PROMICE                                                 |


* CSV to NetCDF (example)
:PROPERTIES:
:CUSTOM_ID: csv-to-netcdf-example
:END:

Here we implement the code with one example file.

#+NAME: imports
#+BEGIN_SRC python
import numpy as np
import pandas as pd
import xarray as xr
import datetime
import glob
import os
#+END_SRC

PROMICE AWS L3 CSV files can be read with the following, complicated only by the format of the AWS txt files (e.g. leading whitespace, date formats not ISO-8601).

#+NAME: load_L3_CSV
#+BEGIN_SRC python :var fname = "./out/EGP_hour_v03.txt" :results output
df = pd.read_csv(fname, delimiter="\s+")
df['time'] = pd.to_datetime(df[['Year', 'MonthOfYear', 'DayOfMonth','HourOfDay(UTC)']]\
                          .rename(columns={'MonthOfYear':'month',
                                           'DayOfMonth':'day',
                                           'HourOfDay(UTC)':'hour'}))
df = df.set_index('time').drop(columns=['Year','MonthOfYear','DayOfMonth','HourOfDay(UTC)',
                                        'DayOfYear', 'DayOfCentury'])

df = df.replace(-999, np.nan)
#+END_SRC

Then, using the [[./variables.csv]] look-up table (LUT) we can

#+NAME: load_LUT
#+BEGIN_SRC python :results none

# load CSV to NetCDF lookup variable lookup table
v = pd.read_csv('./variables.csv', index_col=0)
vf = v.set_index('field')
#+END_SRC

Drop unused columns:

#+NAME: drop_unused_columns
#+BEGIN_SRC python

# Drop unused columns
for c in df.columns:
    if c not in v.index: df.drop(columns=c, inplace=True)

#+END_SRC

And rename remaining columns.

#+NAME: rename_columns
#+BEGIN_SRC python

# Rename columns to CF standards
df.columns = [v.loc[c]['field'] for c in df.columns]
#+END_SRC

Convert from Pandas dataframe to xarray dataset is trivial:

#+NAME: pandas2xarray
#+BEGIN_SRC python

# Convert from pandas to xarray
# ds = xr.Dataset(df)

ds = xr.Dataset(coords=dict(time=df.index))

for c in df.columns:
    ds[c] = df[c]

#+END_SRC

Adding metadata for each variable uses a modified version of the [[./variables.csv]] loaded above.

#+NAME: CF_metadata
#+BEGIN_SRC python

ds.attrs["featureType"] = "timeSeries"

# ds['time'].encoding['units'] = 'hours since 2016-05-01 00:00:00'
# ds['time'] = ds['time'].astype('datetime64[D]')

# Add CF metdata
for k in ds.keys():
    ds[k].attrs['standard_name'] = vf.loc[k]['standard_name']
    ds[k].attrs['long_name'] = vf.loc[k]['long_name']
    ds[k].attrs['units'] = vf.loc[k]['units']


# Also add metadat for 'time' variable'
ds['time'].attrs['standard_name'] = 'time'
ds['time'].attrs['long_name'] = 'time'

# # ds['time'] = (ds['time'] - ds['time'][0]).dt.seconds.astype(np.int)
# a = ds['time'].attrs
# if 'units' in a: a.pop('units')
# a['units'] = 'seconds since ' + ds['time'][0].values.astype(np.str)
# ds['time'] = (ds['time'] - ds['time'][0]).dt.seconds.astype(np.int)
# for kk,vvv in a.items():
#     print(kk)
#     print(vvv)
#     ds['time'].attrs[kk] = str(vvv)
# # ds['time'] = ds['time'].astype(np.int)

a = ds['gps_lon'].attrs
ds['gps_lon'] = -1 * ds['gps_lon']
ds['gps_lon'].attrs = a
ds['gps_lon'].attrs['units'] = 'degrees_east'

ds['lon'] = ds['gps_lon'].mean()
ds['lon'].attrs = a
ds['lon'].attrs['units'] = 'degrees_east'

ds['lat'] = ds['gps_lat'].mean()
ds['lat'].attrs = ds['gps_lat'].attrs

ds['alt'] = ds['gps_alt'].mean()
ds['alt'].attrs = ds['gps_alt'].attrs
ds['alt'].attrs['positive'] = 'up'
ds['gps_alt'].attrs['positive'] = 'up'

# ds = ds.drop(['gps_lon','gps_lat','gps_alt'])

# ds['station_name'] = (('name_strlen'), [fname.split('hour')[0].split('/')[2][:-1]])
# # ds['station_name'].attrs['long_name'] = 'station name'
# ds['station_name'].attrs['cf_role'] = 'timeseries_id'

ds['albedo_70'].attrs['units'] = '-'
#+END_SRC

Add ACDD metadata

#+NAME: ACDD_metadata
#+BEGIN_SRC python

# https://wiki.esipfed.org/Attribute_Convention_for_Data_Discovery_1-3#geospatial_bounds

# highly recommended
ds.attrs['title'] = 'PROMICE AWS data'

ds.attrs['summary'] = 'The Programme for Monitoring of the Greenland Ice Sheet (PROMICE) has been measuring climate and ice sheet properties since 2007. Currently the PROMICE automatic weather station network includes 25 instrumented sites in Greenland. Accurate measurements of the surface and near-surface atmospheric conditions in a changing climate is important for reliable present and future assessment of changes to the Greenland ice sheet. Here we present the PROMICE vision, methodology, and each link in the production chain for obtaining and sharing quality-checked data. In this paper we mainly focus on the critical components for calculating the surface energy balance and surface mass balance. A user-contributable dynamic webbased database of known data quality issues is associated with the data products at (https://github.com/GEUS-PROMICE/ PROMICE-AWS-data-issues/). As part of the living data option, the datasets presented and described here are available at DOI: 10.22008/promice/data/aws, https://doi.org/10.22008/promice/data/aws'

ds.attrs['keywords'] = ['GCMDSK:EARTH SCIENCE > CRYOSPHERE > GLACIERS/ICE SHEETS > ICE SHEETS > ICE SHEET MEASUREMENTS',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > GLACIERS/ICE SHEETS > GLACIER MASS BALANCE/ICE SHEET MASS BALANCE',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE > SNOW/ICE TEMPERATURE',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE > SNOW MELT',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE > SNOW DEPTH',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE > ICE VELOCITY',
 'GCMDSK:EARTH SCIENCE > CRYOSPHERE > SNOW/ICE > ALBEDO',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > ALBEDO',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > ICE GROWTH/MELT',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > ICE VELOCITY',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > SNOW DEPTH',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > SNOW MELT',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE > SNOW/ICE TEMPERATURE',
 'GCMDSK:EARTH SCIENCE > TERRESTRIAL HYDROSPHERE > SNOW/ICE',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC PRESSURE',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > ALBEDO',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > INCOMING SOLAR RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > LONGWAVE RADIATION > DOWNWELLING LONGWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > LONGWAVE RADIATION > UPWELLING LONGWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > LONGWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > NET RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > OUTGOING LONGWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > RADIATIVE FLUX',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > RADIATIVE FORCING',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > SHORTWAVE RADIATION > DOWNWELLING SHORTWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > SHORTWAVE RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION > SUNSHINE',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC RADIATION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC TEMPERATURE > SURFACE TEMPERATURE > AIR TEMPERATURE',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WATER VAPOR > WATER VAPOR INDICATORS > HUMIDITY > ABSOLUTE HUMIDITY',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WATER VAPOR > WATER VAPOR INDICATORS > HUMIDITY > RELATIVE HUMIDITY',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WINDS > LOCAL WINDS',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WINDS > SURFACE WINDS > U/V WIND COMPONENTS',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WINDS > SURFACE WINDS > WIND DIRECTION',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WINDS > SURFACE WINDS > WIND SPEED',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > ATMOSPHERIC WINDS > SURFACE WINDS',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > CLOUDS',
 'GCMDSK:EARTH SCIENCE > ATMOSPHERE > PRECIPITATION']

ds.attrs['Conventions'] = 'ACDD-1.3, CF-1.7'

# recommended
import uuid
ds.attrs['id'] = 'dk.geus.promice:' + str(uuid.uuid4())
ds.attrs['naming_authority'] = 'dk.geus.promice'
ds.attrs['history'] = 'csv2.nc.py'
ds.attrs['source'] = 'PROMICE AWS L3 processing scripts'
ds.attrs['processing_level'] = 'Level 3 NetCDF conversion from CSV output'
ds.attrs['acknowledgement'] = 'The Programme for Monitoring of the Greenland Ice Sheet (PROMICE)'
ds.attrs['license'] = 'Freely distributed'
ds.attrs['standard_name_vocabulary'] = 'CF Standard Name Table (v77, 19 January 2021)'
ds.attrs['date_created'] = str(datetime.datetime.now().isoformat())
ds.attrs['creator_name'] = 'Ken Mankoff'
ds.attrs['creator_email'] = 'kdm@geus'
ds.attrs['creator_url'] = 'http://kenmankoff.com'
ds.attrs['institution'] = 'GEUS'
ds.attrs['publisher_name'] = 'GEUS'
ds.attrs['publisher_email'] = 'info@promice.dk'
ds.attrs['publisher_url'] = 'http://promice.dk'

ds.attrs['geospatial_bounds'] = "POLYGON((" + \
    f"{ds['lat'].min().values} {ds['lon'].min().values}, " + \
    f"{ds['lat'].min().values} {ds['lon'].max().values}, " + \
    f"{ds['lat'].max().values} {ds['lon'].max().values}, " + \
    f"{ds['lat'].max().values} {ds['lon'].min().values}, " + \
    f"{ds['lat'].min().values} {ds['lon'].min().values}))"
ds.attrs['geospatial_bounds_crs'] = 'EPSG:4326'
ds.attrs['geospatial_bounds_vertical_crs'] = 'EPSG:4979'
ds.attrs['geospatial_lat_min'] = ds['lat'].min().values
ds.attrs['geospatial_lat_max'] = ds['lat'].max().values
ds.attrs['geospatial_lon_min'] = ds['lon'].min().values
ds.attrs['geospatial_lon_max'] = ds['lon'].max().values
ds.attrs['geospatial_vertical_min'] = ds['alt'].min().values
ds.attrs['geospatial_vertical_max'] = ds['alt'].max().values
ds.attrs['geospatial_vertical_positive'] = 'up'
ds.attrs['time_coverage_start'] = str(ds['time'][0].values)
ds.attrs['time_coverage_end'] = str(ds['time'][-1].values)
# https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm
ds.attrs['time_coverage_duration'] = pd.Timedelta((ds['time'][-1] - ds['time'][0]).values).isoformat()
ds.attrs['time_coverage_resolution'] = pd.Timedelta((ds['time'][1] - ds['time'][0]).values).isoformat()

# suggested
ds.attrs['creator_type'] = 'person'
ds.attrs['creator_institution'] = 'GEUS'
ds.attrs['publisher_type'] = 'institution'
ds.attrs['publisher_institution'] = 'GEUS'
ds.attrs['program'] = 'PROMICE'
ds.attrs['contributor_name'] = ''
ds.attrs['contributor_role'] = ''
ds.attrs['geospatial_lat_units'] = 'degrees_north'
# ds.attrs['geospatial_lat_resolution'] = ''
ds.attrs['geospatial_lon_units'] = 'degrees_east'
# ds.attrs['geospatial_lon_resolution'] = ''
ds.attrs['geospatial_vertical_units'] = 'EPSG:4979 CHECKME'
# ds.attrs['geospatial_vertical_resolution'] = ''
# ds.attrs['date_modified'] = ds.attrs['date_created']
# ds.attrs['date_issued'] = ds.attrs['date_created']
# ds.attrs['date_metadata_modified'] = ''
ds.attrs['product_version'] = 3
ds.attrs['keywords_vocabulary'] = 'GCMDSK:GCMD Science Keywords:https://gcmd.earthdata.nasa.gov/kms/concepts/concept_scheme/sciencekeywords, CFSTDN:NetCDF COARDS Climate and Forecast Standard Names'
# ds.attrs['platform'] = ''
# ds.attrs['platform_vocabulary'] = 'GCMD:GCMD Keywords'
ds.attrs['instrument'] = 'See https://doi.org/10.5194/essd-13-3819-2021'
# ds.attrs['instrument_vocabulary'] = 'GCMD:GCMD Keywords'
# ds.attrs['cdm_data_type'] = ''
# ds.attrs['metadata_link'] = ''
ds.attrs['references'] = 'Fausto, R. S., van As, D., Mankoff, K. D., Vandecrux, B., Citterio, M., Ahlstrøm, A. P., Andersen, S. B., Colgan, W., Karlsson, N. B., Kjeldsen, K. K., Korsgaard, N. J., Larsen, S. H., Nielsen, S., Pedersen, A. Ø., Shields, C. L., Solgaard, A. M., and Box, J. E.: Programme for Monitoring of the Greenland Ice Sheet (PROMICE) automatic weather station data, Earth Syst. Sci. Data, 13, 3819–3845, https://doi.org/10.5194/essd-13-3819-2021, 2021.'

ds.attrs['comment'] = 'Data source: https://doi.org/10.22008/promice/data/aws'

# ds.attrs['geospatial_lat_extents_match'] = 'gps_lat'
# ds.attrs['geospatial_lon_extents_match'] = 'gps_lon'


# from shapely.geometry import Polygon
# geom = Polygon(zip(ds['lat'].values, ds['lon'].values))
# # print(geom.bounds)
# ds.attrs['geospatial_bounds'] = geom.bounds







ds.attrs['project'] = 'PROMICE'


for vv in ['p', 't_1', 't_2', 'rh', 'sh', 'wspd', 'wdir', 'z_boom', 'z_stake', 'z_pt',
           't_i_1', 't_i_2', 't_i_3', 't_i_4', 't_i_5', 't_i_6', 't_i_7', 't_i_8',
           'tilt_x', 'tilt_y', 't_log']:
    ds[vv].attrs['coverage_content_type'] = 'physicalMeasurement'
    ds[vv].attrs['coordinates'] = "time lat lon alt"

for vv in ['dshf', 'dlhf', 'dsr', 'dsr_cor', 'usr', 'usr_cor', 'albedo_70', 'dlr', 'ulr', 'cc', 't_surf', 'z_pt_cor']:
    ds[vv].attrs['coverage_content_type'] = 'modelResult'
    ds[vv].attrs['coordinates'] = "time lat lon alt"

for vv in ['fan_dc', 'batt_v']:
    ds[vv].attrs['coverage_content_type'] = 'auxiliaryInformation'
    ds[vv].attrs['coordinates'] = "time lat lon alt"

for vv in ['gps_hdop']:
    ds[vv].attrs['coverage_content_type'] = 'qualityInformation'
    ds[vv].attrs['coordinates'] = "time lat lon alt"

for vv in ['gps_time', 'lon', 'lat', 'alt']:
    ds[vv].attrs['coverage_content_type'] = 'coordinate'


ds['lon'].attrs['long_name'] = 'station longitude'
ds['lat'].attrs['long_name'] = 'station latitude'
ds['alt'].attrs['long_name'] = 'station altitude'

ds['lon'].attrs['axis'] = 'X'
ds['lat'].attrs['axis'] = 'Y'
ds['alt'].attrs['axis'] = 'Z'

for vv in ['lon', 'lat', 'alt']:
    ds[vv].attrs['coverage_content_type'] = 'coordinate'

# for vv in []: ds[vv].attrs['coverage_content_type'] = 'referenceInformation'

#+END_SRC

#+RESULTS:

Save to file

#+BEGIN_SRC python
ds.to_netcdf('aws.nc')
#+END_SRC

#+RESULTS:

With the resulting NetCDF file, here showing the top and few lines from =ncdump=

#+BEGIN_SRC bash :exports results
ncdump -ch aws.nc | head -n12
echo "..."
ncdump -ch aws.nc | tail -n34
#+END_SRC

#+RESULTS:
#+begin_example
netcdf aws {
dimensions:
	time = 23640 ;
variables:
	int64 time(time) ;
		time:standard_name = "time" ;
		time:long_name = "time" ;
		time:units = "hours since 2016-05-01 00:00:00" ;
		time:calendar = "proleptic_gregorian" ;
	double p(time) ;
		p:_FillValue = NaN ;
		p:standard_name = "air_pressure" ;
...
		:naming_authority = "dk.promice" ;
		:history = "csv2.nc.py" ;
		:source = "PROMICE AWS L3 processing scripts" ;
		:processing_level = "Level 3 NetCDF conversion from CSV output" ;
		:acknowledgement = "The Programme for Monitoring of the Greenland Ice Sheet (PROMICE)" ;
		:license = "Freely distributed" ;
		:comment = "N/A" ;
		:geospatial_lat_min = 75.6245223 ;
		:geospatial_lat_max = 75.6253575 ;
		:geospatial_lon_min = -35.9752063 ;
		:geospatial_lon_max = -35.9729882 ;
		:geospatial_bounds = "POLYGON((75.6245223 -35.975206299999996, 75.6245223 -35.9729882, 75.62535749999999 -35.9729882, 75.62535749999999 -35.975206299999996, 75.6245223 -35.975206299999996))" ;
		:geospatial_vertical_min = 2632. ;
		:geospatial_vertical_max = 2683.3 ;
		:geospatial_vertical_positive = "up" ;
		:geospatial_bounds_crs = "EPSG:4326" ;
		:geospatial_bounds_vertical_crs = "EPSG:5831" ;
		:standard_name_vocabulary = "CF Standard Name Table (v77, 19 January 2021)";
		:time_coverage_duration = "P984DT23H0M0S" ;
		:time_coverage_resolution = "P0DT1H0M0S" ;
		:time_coverage_start = "2016-05-01T00:00:00.000000000" ;
		:time_coverage_end = "2019-01-10T23:00:00.000000000" ;
		:date_created = "2021-06-02T04:56:26.152825" ;
		:creator_type = "person" ;
		:creator_institution = "GEUS" ;
		:creator_name = "Ken Mankoff" ;
		:creator_email = "kdm@geus" ;
		:creator_url = "http://kenmankoff.com" ;
		:institution = "GEUS" ;
		:publisher_name = "Ken Mankoff" ;
		:publisher_email = "kdm@geus.dk" ;
		:publisher_url = "http://promice.dk" ;
		:project = "PROMICE" ;
}
#+end_example

CF compliance check with =compliance-checker.py= utility:

#+BEGIN_SRC bash :exports results
source  /home/kdm/local/miniconda3/etc/profile.d/conda.sh
conda activate PROMICE_dev
cchecker.py -t acdd:1.3 -t cf:1.7 aws.nc |cat
#+END_SRC

#+RESULTS:
#+begin_example


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                     cf:1.7                                     
http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html
--------------------------------------------------------------------------------
                               Corrective Actions                               
aws.nc has 3 potential issues


                                     Errors                                     
--------------------------------------------------------------------------------
§2.2 Data Types
,* The variable time failed because the datatype is int64

§3.1 Units
,* units for variable t_2 must be convertible to K currently they are C
,* units for variable t_1 must be convertible to K currently they are C
,* units for variable t_surf must be convertible to K currently they are C

§3.3 Standard Name
,* standard_name battery_voltage is not defined in Standard Name Table v72
,* standard_name depth_of_pressure_transducer_in_ice is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t6 is not defined in Standard Name Table v72
,* standard_name distance_to_surface_from_boom is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t7 is not defined in Standard Name Table v72
,* standard_name surface_downwelling_shortwave_flux_corrected is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t3 is not defined in Standard Name Table v72
,* standard_name fan_current is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t4 is not defined in Standard Name Table v72
,* standard_name temperature_of_logger is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t2 is not defined in Standard Name Table v72
,* standard_name surface_upwelling_shortwave_flux_corrected is not defined in Standard Name Table v72
,* standard_name surface_albedo_70 is not defined in Standard Name Table v72
,* standard_name depth_of_pressure_transducer_in_ice_corrected is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t1 is not defined in Standard Name Table v72
,* standard_name platform_view_angle_x is not defined in Standard Name Table v72
,* standard_name distance_to_surface_from_stake_assembly is not defined in Standard Name Table v72
,* standard_name gps_hdop is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t8 is not defined in Standard Name Table v72
,* standard_name gps_time is not defined in Standard Name Table v72
,* standard_name ice_temperature_at_t5 is not defined in Standard Name Table v72
,* standard_name platform_view_angle_y is not defined in Standard Name Table v72


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                    acdd:1.3                                    
http://wiki.esipfed.org/index.php?title=Category:Attribute_Conventions_Dataset_Discovery
--------------------------------------------------------------------------------
All tests passed!
#+end_example

The results are not entirely CF-compliant.
+ Units can be fixed by =K = C - 273.15=
+ Standard names are limited by the [[http://cfconventions.org/Data/cf-standard-names/75/build/cf-standard-name-table.html][existing vocabulary]]. We have tried to follow the [[http://cfconventions.org/Data/cf-standard-names/docs/guidelines.html][guidelines]] for constructing new names.


* CSV to NetCDF

Using the above [[#csv-to-netcdf-example]] template, we do the same thing but with the following additions:

Loop through each station

#+BEGIN_SRC python :tangle csv2nc.py
<<imports>>
<<load_LUT>>

# For each CSV file...
CSV_list = glob.glob('./out/*hour*')
nc_list = [_.split('/')[-1].split('.txt')[0][:-4][:-5]+'.nc' for _ in CSV_list]
for fname,ncname in zip(CSV_list, nc_list):
    print(f'Generating {ncname} from {fname}')
    <<process_file>>
    ds.time.encoding["dtype"] = "int32" # CF standard requires time as int not int64
    ds.to_netcdf('./out/'+ncname)
    
#+END_SRC

And convert all variables with units =C= to =K=.
#+NAME: C2K
#+BEGIN_SRC python
for k in ds.keys(): # for each var
    if 'units' in ds[k].attrs:        
        if ds[k].attrs['units'] == 'C':
            attrs = ds[k].attrs
            ds[k] = ds[k] - 273.15
            attrs['units'] = 'K'
            ds[k].attrs = attrs
#+END_SRC

#+NAME: C2C
#+BEGIN_SRC python
for k in ds.keys(): # for each var
    if 'units' in ds[k].attrs:        
        if ds[k].attrs['units'] == 'C':
            ds[k].attrs['units'] = 'degrees_C'
#+END_SRC

Where =<<process_file>>= is

#+NAME: process_file
#+BEGIN_SRC python
<<load_L3_CSV>>
<<drop_unused_columns>>
<<rename_columns>>
<<pandas2xarray>>
<<CF_metadata>>
# <<C2K>>
<<C2C>>
<<ACDD_metadata>>
#+END_SRC



* Time series NetCDF


#+BEGIN_SRC jupyter-python :reuslts verbatim
import xarray as xr

time = pd.date_range("2014-09-06", periods=3)
ds = xr.Dataset(coords=dict(time=time))
ds.time.encoding["dtype"] = "int32" # CF standard requires time as int not int64
ds['time'].attrs['standard_name'] = 'time'
ds['time'].attrs['long_name'] = 'time'

# ds['station_name'] = (('name_strlen'), ['EGP'])
# ds['station_name'].attrs['cf_role'] = 'timeseries_id'

ds['t'] = (('time'), np.array([42,42,42]).astype(np.double))
ds['t'].attrs['units'] = 'degree_C'
ds['t'].attrs['long_name'] = 'Air temperature'
ds['t'].attrs['standard_name'] = 'air_temperature'
# ds['t'].attrs['coverage_content_type'] = 'physicalMeasurement'

ds['rh'] = (('time'), np.array([1,1,1]).astype(np.double))
ds['rh'].attrs['units'] = '%'
ds['rh'].attrs['long_name'] = 'Relative Humidity'
ds['rh'].attrs['standard_name'] = 'relative_humidity'
# ds['rh'].attrs['coverage_content_type'] = 'physicalMeasurement'

ds.attrs['featureType'] = 'timeSeries'


print(ds)
ds.to_netcdf('aws.nc')
#+END_SRC

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:       (name_strlen: 1, time: 3)
Coordinates:
  ,* time          (time) datetime64[ns] 2014-09-06 2014-09-07 2014-09-08
Dimensions without coordinates: name_strlen
Data variables:
    station_name  (name_strlen) <U3 'EGP'
    t             (time) float64 42.0 42.0 42.0
    rh            (time) float64 1.0 1.0 1.0
Attributes:
    featureType:  timeSeries
#+end_example



* NetCDF from CDL

** Official version

+ From http://cfconventions.org/cf-conventions/v1.6.0/cf-conventions.html#_single_time_series_including_deviations_from_a_nominal_fixed_spatial_location

#+BEGIN_SRC bash :results verbatim drawer org
rm -f foo.nc

cat << EOF > foo.cdl
netcdf foo {
  dimensions:
      time = 100233 ;
      name_strlen = 23 ;

   variables:
      float lon ;
          lon:standard_name = "longitude";
          lon:long_name = "station longitude";
          lon:units = "degrees_east";
      float lat ;
          lat:standard_name = "latitude";
          lat:long_name = "station latitude" ;
          lat:units = "degrees_north" ;
      float alt ;
          alt:long_name = "vertical distance above the surface" ;
          alt:standard_name = "height" ;
          alt:units = "m";
          alt:positive = "up";
          alt:axis = "Z";
      char station_name(name_strlen) ;
          station_name:long_name = "station name" ;
          station_name:cf_role = "timeseries_id";

      double time(time) ;
          time:standard_name = "time";
          time:long_name = "time of measurement" ;
          time:units = "days since 1970-01-01 00:00:00" ;
          time:missing_value = -999.9;
      float humidity(time) ;
          humidity:standard_name = "specific_humidity" ;
          humidity:coordinates = "time lat lon alt" ;
          humidity:_FillValue = -999.9;
      float temp(time) ;
          temp:standard_name = "air_temperature" ;
          temp:units = "Celsius" ;
          temp:coordinates = "time lat lon alt" ;
          temp:_FillValue = -999.9;

// global attributes:
          :featureType = "timeSeries";
}
EOF

ncgen -b foo.cdl
/home/kdm/local/miniconda3/envs/PROMICE_dev/bin/cchecker.py -t acdd:1.3 -t cf:1.7 foo.nc | cat
#+END_SRC

#+RESULTS:
#+begin_src org


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                    acdd:1.3                                    
http://wiki.esipfed.org/index.php?title=Category:Attribute_Conventions_Dataset_Discovery
--------------------------------------------------------------------------------
                               Corrective Actions                               
foo.nc has 7 potential issues


                               Highly Recommended                               
--------------------------------------------------------------------------------
Global Attributes
,* Conventions does not contain 'ACDD-1.3'
,* keywords not present
,* summary not present
,* title not present

variable "humidity" missing the following attributes:
,* coverage_content_type
,* long_name
,* units

variable "temp" missing the following attributes:
,* coverage_content_type
,* long_name


                                  Recommended                                   
--------------------------------------------------------------------------------
Global Attributes
,* acknowledgment/acknowledgement not present
,* comment not present
,* creator_name not present
,* creator_url not present
,* creator_email not present
,* geospatial_bounds not present
,* geospatial_lat_min not present
,* geospatial_lat_max not present
,* geospatial_lon_min not present
,* geospatial_lon_max not present
,* geospatial_vertical_min not present
,* geospatial_vertical_max not present
,* geospatial_vertical_positive not present
,* geospatial_bounds_crs not present
,* geospatial_bounds_vertical_crs not present
,* history not present
,* id not present
,* institution not present
,* license not present
,* naming_authority not present
,* project not present
,* processing_level not present
,* publisher_name not present
,* publisher_url not present
,* publisher_email not present
,* standard_name_vocabulary not present
,* source not present
,* time_coverage_start not present
,* time_coverage_end not present
,* time_coverage_duration not present
,* time_coverage_resolution not present

date_created_is_iso
,* Attr date_created is not present

geospatial_lat_extents_match
,* geospatial_lat_min/max attribute not found, CF-1.6 spec chapter 4.1

geospatial_lon_extents_match
,* geospatial_lon_min/max attribute not found, CF-1.6 spec chapter 4.1


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                     cf:1.7                                     
http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html
--------------------------------------------------------------------------------
                               Corrective Actions                               
foo.nc has 3 potential issues


                                     Errors                                     
--------------------------------------------------------------------------------
§9.1 Features and feature types
,* Unidentifiable feature for variable lon
,* Unidentifiable feature for variable lat
,* Unidentifiable feature for variable alt


                                    Warnings                                    
--------------------------------------------------------------------------------
§2.6 Attributes
,* §2.6.2 global attribute title should exist and be a non-empty string
,* §2.6.2 global attribute history should exist and be a non-empty string
,* §2.6.1 Conventions field is not present

§3.1 Units
,* units (None) attribute of 'humidity' must be a string compatible with UDUNITS
#+end_src



** Improved official version

+ From http://cfconventions.org/cf-conventions/v1.6.0/cf-conventions.html#_single_time_series_including_deviations_from_a_nominal_fixed_spatial_location

#+BEGIN_SRC bash :results verbatim drawer org
rm -f foo.nc

cat << EOF > foo.cdl
netcdf foo {
  dimensions:
      time = 3 ;
      name_strlen = 1 ;

   variables:
      double lon ;
          lon:standard_name = "longitude";
          lon:long_name = "station longitude";
          lon:units = "degrees_east";
	  lon:coverage_content_type = "coordinate" ;
          lon:axis = "X" ;
      double lat ;
          lat:standard_name = "latitude";
          lat:long_name = "station latitude" ;
          lat:units = "degrees_north" ;
	  lat:coverage_content_type = "coordinate" ;
          lat:axis = "Y" ;
      double alt ;
          alt:long_name = "vertical distance above the surface" ;
          alt:standard_name = "height" ;
          alt:units = "m";
          alt:positive = "up";
          alt:axis = "Z";
      string station_name(name_strlen) ;
          station_name:long_name = "station name" ;
          station_name:cf_role = "timeseries_id";

      int time(time) ;
          time:standard_name = "time";
          time:long_name = "time of measurement" ;
          time:units = "hours since 1970-01-01 00:00:00" ;
          time:missing_value = -999.9;
      float humidity(time) ;
          humidity:standard_name = "specific_humidity" ;
	  humidity:units = "%" ;
	  humidity:long_name = "Specific humidity" ;
          humidity:coordinates = "time lat lon alt" ;
	  humidity:coverage_content_type = "physicalMeasurement" ;
          humidity:_FillValue = -999.9;
      float temp(time) ;
          temp:standard_name = "air_temperature" ;
          temp:units = "Celsius" ;
	  temp:long_name = "Temperature" ;
	  temp:coverage_content_type = "physicalMeasurement" ;
          temp:coordinates = "time lat lon alt" ;
          temp:_FillValue = -999.9;

// global attributes:
          :featureType = "timeSeries";
	  :Conventions = "ACDD-1.3, CF-1.7";
	  :keywords = "foo" ;
	  :summary = "foo" ;
	  :title = "foo" ;
	  :acknowledgment = "foo" ;
	  :comment = "foo" ; 
	  :creator_name = "Ken Mankoff" ;
	  :creator_url = "http://" ; 
	  :creator_email = "kdm@geus.dk" ;
	  :geospatial_lat_min = "24" ;
	  :geospatial_lat_max = "24" ;
	  :geospatial_lon_min = "42" ;
	  :geospatial_lon_max = "42" ;
	  :geospatial_vertical_min = "99" ;
	  :geospatial_vertical_max = "99" ;
	  :geospatial_vertical_positive = "up" ;
	  :geospatial_bounds_crs = "3413" ;
	  :geospatial_bounds_vertical_crs = "3413" ;
	  :history = "n/a" ;
	  :id = "42" ;
	  :institution = "GEUS" ;
	  :license = "GPL" ;
	  :naming_authority = "GEUS" ;
	  :project = "PROMICE" ;
	  :processing_level = "3" ;
	  :publisher_name = "GEUS" ;
	  :publisher_url = "http://" ;
	  :publisher_email = "kdm@geus.dk" ;
	  :standard_name_vocabulary = "foo" ;
	  :source = "foo" ;
	  :geospatial_bounds = "POLYGON((24 42, 24 42, 24 42, 24 42, 24 42))" ;
	  :date_created = "2020-08-01" ;
	  :time_coverage_start = "1970-01-01T00:00:00.000000000" ;
	  :time_coverage_end = "1970-01-01T02:00:00.000000000" ;
          :time_coverage_duration = "P0DT3H0M0S" ;
          :time_coverage_resolution = "P0DT1H0M0S" ;

data:

 lon = 42 ;

 lat = 24 ;

 alt = 99 ;

 station_name = "foo" ;

 time = 0, 1, 2 ;

 humidity = 100, 100, 90 ;

 temp = 24, 42, 212;
}
EOF

ncgen -b foo.cdl
sync
/home/kdm/local/miniconda3/envs/PROMICE_dev/bin/cchecker.py -t acdd:1.3 -t cf:1.7 foo.nc 2>&1|tee
#+END_SRC

#+RESULTS:
#+begin_src org
Running Compliance Checker on the datasets from: ['foo.nc']
/home/kdm/local/miniconda3/envs/PROMICE_dev/lib/python3.8/site-packages/compliance_checker/acdd.py:615: UserWarning: WARNING: missing_value not used since it
cannot be safely cast to variable data type
  num2pydate(ds.variables[timevar][0], ds.variables[timevar].units), "UTC"
/home/kdm/local/miniconda3/envs/PROMICE_dev/lib/python3.8/site-packages/compliance_checker/acdd.py:618: UserWarning: WARNING: missing_value not used since it
cannot be safely cast to variable data type
  num2pydate(ds.variables[timevar][-1], ds.variables[timevar].units),
WARNING: The following exceptions occured during the cf:1.7 checker (possibly indicate compliance checker issues):
cf:1.7.check_data_types: type object 'str' has no attribute 'kind'
WARNING: The following exceptions occured during the acdd:1.3 checker (possibly indicate compliance checker issues):
acdd:1.3.check_vertical_extents: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                     cf:1.7                                     
http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html
--------------------------------------------------------------------------------
All tests passed!


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                    acdd:1.3                                    
http://wiki.esipfed.org/index.php?title=Category:Attribute_Conventions_Dataset_Discovery
--------------------------------------------------------------------------------
All tests passed!
#+end_src


** My version

#+BEGIN_SRC bash
rm -f foo.nc

cat << EOF > foo.cdl
netcdf foo {
   dimensions:
      time = 3 ;
      name_strlen = 1 ;

   variables:
      float lon ;
          lon:standard_name = "longitude";
          lon:long_name = "station longitude";
          lon:units = "degrees_east";
      float lat ;
          lat:standard_name = "latitude";
          lat:long_name = "station latitude" ;
          lat:units = "degrees_north" ;
      float alt ;
          alt:long_name = "vertical distance above the surface" ;
          alt:standard_name = "height" ;
          alt:units = "m";
          alt:positive = "up";
          alt:axis = "Z";
      char station_name(name_strlen) ;
          station_name:long_name = "station name" ;
          station_name:cf_role = "timeseries_id";
      double time(time) ;
          time:standard_name = "time";
          time:long_name = "time of measurement" ;
          time:units = "days since 1970-01-01 00:00:00" ;
      float sh(time) ;
          sh:standard_name = "specific_humidity" ;
	  sh:coordinates = "time lat lon alt" ;
          sh:coverage_content_type = "physicalMeasurement" ;
      float t(time) ;
          t:standard_name = "air_temperature" ;
          t:units = "Celsius" ;
	  t:coordinates = "time lat lon alt" ;
          t:coverage_content_type = "physicalMeasurement" ;

// global attributes:
          :featureType = "timeSeries";
}
EOF

sync
ncgen -b foo.cdl
/home/kdm/local/miniconda3/envs/PROMICE_dev/bin/cchecker.py -t acdd:1.3 -t cf:1.7 foo.nc |cat
#+END_SRC

#+RESULTS:
#+begin_example


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                     cf:1.7                                     
http://cfconventions.org/Data/cf-conventions/cf-conventions-1.7/cf-conventions.html
--------------------------------------------------------------------------------
                               Corrective Actions                               
foo.nc has 2 potential issues


                                    Warnings                                    
--------------------------------------------------------------------------------
§2.6 Attributes
,* §2.6.2 global attribute title should exist and be a non-empty string
,* §2.6.2 global attribute history should exist and be a non-empty string
,* §2.6.1 Conventions field is not present

§3.1 Units
,* units (None) attribute of 'sh' must be a string compatible with UDUNITS


--------------------------------------------------------------------------------
                         IOOS Compliance Checker Report                         
                                    acdd:1.3                                    
http://wiki.esipfed.org/index.php?title=Category:Attribute_Conventions_Dataset_Discovery
--------------------------------------------------------------------------------
                               Corrective Actions                               
foo.nc has 7 potential issues


                               Highly Recommended                               
--------------------------------------------------------------------------------
Global Attributes
,* Conventions does not contain 'ACDD-1.3'
,* keywords not present
,* summary not present
,* title not present

variable "sh" missing the following attributes:
,* long_name
,* units

variable "t" missing the following attributes:
,* long_name


                                  Recommended                                   
--------------------------------------------------------------------------------
Global Attributes
,* acknowledgment/acknowledgement not present
,* comment not present
,* creator_name not present
,* creator_url not present
,* creator_email not present
,* geospatial_bounds not present
,* geospatial_lat_min not present
,* geospatial_lat_max not present
,* geospatial_lon_min not present
,* geospatial_lon_max not present
,* geospatial_vertical_min not present
,* geospatial_vertical_max not present
,* geospatial_vertical_positive not present
,* geospatial_bounds_crs not present
,* geospatial_bounds_vertical_crs not present
,* history not present
,* id not present
,* institution not present
,* license not present
,* naming_authority not present
,* project not present
,* processing_level not present
,* publisher_name not present
,* publisher_url not present
,* publisher_email not present
,* standard_name_vocabulary not present
,* source not present
,* time_coverage_start not present
,* time_coverage_end not present
,* time_coverage_duration not present
,* time_coverage_resolution not present

date_created_is_iso
,* Attr date_created is not present

geospatial_lat_extents_match
,* geospatial_lat_min/max attribute not found, CF-1.6 spec chapter 4.1

geospatial_lon_extents_match
,* geospatial_lon_min/max attribute not found, CF-1.6 spec chapter 4.1
#+end_example


